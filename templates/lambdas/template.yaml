AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  LoadLambdaName:
    Type: String
  DbVectorS3:
    Type: String
  ConnectInstanceArn:
    Type: String
  ConnectInstanceId:
    Type: String
  ContactFlowsBucketName:
    Type: String

Resources:

  ContactFlowS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ContactFlowsBucketName

  LangChainLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../code/zip/langchain.zip
      Handler: documents_management.handler
      Runtime: python3.9
      PackageType: Zip
      Policies: 
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: !Ref DbVectorS3
  
  CreateContactFlowsLambdaRoleB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: con-s3-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Join ["", ["arn:aws:s3:::",!Ref ContactFlowsBucketName, "/*"]]
        - PolicyName: connect-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'connect:CreateContactFlow'
                  - 'connect:DeleteContactFlow'
                  - 'connect:UpdateContactFlowContent'
                Resource: !Join ["", [!Ref ConnectInstanceArn, "/contact-flow/*"]]
        - PolicyName: execute-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - logs:*
                Resource: "arn:aws:logs:*:*:*"


  CreateContactFlowsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt CreateContactFlowsLambdaRoleB.Arn
      CodeUri: ../../code/zip/create_contact_flows.zip
      Handler: create_contact_flows.handler
      Runtime: python3.9
      PackageType: Zip
      Environment:
        Variables:
          CONNECT_INSTANCE_ID: !Ref ConnectInstanceId
      Events:
        S3Event: 
          Type: S3
          Properties:
            Bucket: !Ref ContactFlowS3
            Events: s3:ObjectCreated:*

  LoadContactFlowsLambdaRoleB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: con-s3-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Join ["", ["arn:aws:s3:::",!Ref ContactFlowsBucketName, "/*"]]
        - PolicyName: execute-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - logs:*
                Resource: "arn:aws:logs:*:*:*"

  LoadContactFlowsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref LoadLambdaName
      CodeUri: ../../code/zip/load_contact_flows.zip
      Handler: load_contact_flows.handler
      Runtime: python3.9
      PackageType: Zip
      Role: !GetAtt LoadContactFlowsLambdaRoleB.Arn


        


    


  


  








